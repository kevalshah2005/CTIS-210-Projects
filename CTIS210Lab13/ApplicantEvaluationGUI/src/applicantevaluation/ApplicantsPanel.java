/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package applicantevaluation;

import java.awt.Color;
import java.util.ArrayList;

/**
 *
 * @author keval
 */
public class ApplicantsPanel extends javax.swing.JPanel {
    
    // implements specification 6
    
    private ArrayList<PositionApplicant> applicants;
    private int appIndex = 0;
    private final Color LABEL_COLOR = new Color(238, 238, 238);

    // implements specification 7
    /**
     * Creates new form ApplicantsPanel
     */
    public ApplicantsPanel() {
        initComponents();
    }

    public ApplicantsPanel(ArrayList<PositionApplicant> applicants) {
        initComponents();
        this.applicants = applicants;
        
        // implements specification 8
        introScore.setText("Intro to Comp Prog: " + applicants.get(0).getIntroCompProg());
        advScore.setText("Advanced Comp Prog: " + applicants.get(0).getAdvCompProg());
        networkingScore.setText("Networking: " + applicants.get(0).getNetworking());
        databaseSystemsScore.setText("Database Systems: " + applicants.get(0).getDatabaseSystems());
        algorithmsScore.setText("Algorithms: " + applicants.get(0).getAlgorithms());
        operatingScore.setText("Operating Systems: " + applicants.get(0).getOperatingSystems());
        gpaScore.setText("GPA: " + applicants.get(0).getGpa());
        
        analyzeAppLabelSet();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        analyzeButtonGroup = new javax.swing.ButtonGroup();
        introScore = new javax.swing.JLabel();
        appNumber = new javax.swing.JTextField();
        forwardApp = new javax.swing.JButton();
        advScore = new javax.swing.JLabel();
        backwardApp = new javax.swing.JButton();
        analysis = new javax.swing.JLabel();
        displayColor = new javax.swing.JCheckBox();
        analyze1Choice = new javax.swing.JRadioButton();
        analyze2Choice = new javax.swing.JRadioButton();
        analyze3Choice = new javax.swing.JRadioButton();
        analyze4Choice = new javax.swing.JRadioButton();
        applicantSlider = new javax.swing.JSlider();
        applicantSliderLabel = new javax.swing.JLabel();
        networkingScore = new javax.swing.JLabel();
        databaseSystemsScore = new javax.swing.JLabel();
        algorithmsScore = new javax.swing.JLabel();
        operatingScore = new javax.swing.JLabel();
        gpaScore = new javax.swing.JLabel();

        introScore.setText("jLabel1");
        introScore.setOpaque(true);

        appNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        appNumber.setText("0");
        appNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appNumberActionPerformed(evt);
            }
        });

        forwardApp.setText("-->");
        forwardApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardAppActionPerformed(evt);
            }
        });

        advScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        advScore.setText("jLabel1");
        advScore.setOpaque(true);

        backwardApp.setText("<--");
        backwardApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardAppActionPerformed(evt);
            }
        });

        analysis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        analysis.setText("jLabel1");
        analysis.setOpaque(true);

        displayColor.setText("Red Background");
        displayColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayColorActionPerformed(evt);
            }
        });

        analyzeButtonGroup.add(analyze1Choice);
        analyze1Choice.setSelected(true);
        analyze1Choice.setText("Analysis 1");
        analyze1Choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyze1ChoiceActionPerformed(evt);
            }
        });

        analyzeButtonGroup.add(analyze2Choice);
        analyze2Choice.setText("Analysis 2");
        analyze2Choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyze2ChoiceActionPerformed(evt);
            }
        });

        analyzeButtonGroup.add(analyze3Choice);
        analyze3Choice.setText("Analysis 3");
        analyze3Choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyze3ChoiceActionPerformed(evt);
            }
        });

        analyzeButtonGroup.add(analyze4Choice);
        analyze4Choice.setText("Analysis 4");
        analyze4Choice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyze4ChoiceActionPerformed(evt);
            }
        });

        applicantSlider.setMajorTickSpacing(5000);
        applicantSlider.setMaximum(18356);
        applicantSlider.setMinorTickSpacing(500);
        applicantSlider.setPaintLabels(true);
        applicantSlider.setPaintTicks(true);
        applicantSlider.setValue(0);
        applicantSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                applicantSliderStateChanged(evt);
            }
        });

        applicantSliderLabel.setText("Change Applicant Number");

        networkingScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        networkingScore.setText("jLabel1");
        networkingScore.setOpaque(true);

        databaseSystemsScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        databaseSystemsScore.setText("jLabel1");
        databaseSystemsScore.setOpaque(true);

        algorithmsScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        algorithmsScore.setText("jLabel1");
        algorithmsScore.setOpaque(true);

        operatingScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        operatingScore.setText("jLabel1");
        operatingScore.setOpaque(true);

        gpaScore.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gpaScore.setText("jLabel1");
        gpaScore.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(displayColor)
                        .addGap(26, 26, 26)
                        .addComponent(applicantSliderLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(applicantSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(analyze2Choice)
                            .addComponent(analyze1Choice)
                            .addComponent(analyze3Choice)
                            .addComponent(analyze4Choice)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(backwardApp)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(introScore, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(appNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(forwardApp))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(advScore)
                                        .addComponent(analysis)
                                        .addComponent(networkingScore)
                                        .addComponent(databaseSystemsScore)
                                        .addComponent(algorithmsScore)
                                        .addComponent(operatingScore)
                                        .addComponent(gpaScore)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(162, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(displayColor)
                    .addComponent(applicantSliderLabel))
                .addGap(7, 7, 7)
                .addComponent(applicantSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forwardApp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backwardApp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(introScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(advScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(networkingScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(databaseSystemsScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(algorithmsScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(operatingScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gpaScore)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(analysis)
                .addGap(18, 18, 18)
                .addComponent(analyze1Choice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(analyze2Choice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(analyze3Choice)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(analyze4Choice)
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents

    // implements specification 9
    private void appNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appNumberActionPerformed
        // TODO add your handling code here:
        appIndex = Integer.parseInt(appNumber.getText());  
        updateIndex();
    }//GEN-LAST:event_appNumberActionPerformed

    private void forwardAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardAppActionPerformed
        // TODO add your handling code here:
        appIndex++;
        updateIndex();
    }//GEN-LAST:event_forwardAppActionPerformed

    private void backwardAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardAppActionPerformed
        // TODO add your handling code here:
        appIndex--;
        updateIndex();
    }//GEN-LAST:event_backwardAppActionPerformed

    private void displayColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayColorActionPerformed
        // TODO add your handling code here:
        changeLabelColor();
    }//GEN-LAST:event_displayColorActionPerformed

    private void analyze1ChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyze1ChoiceActionPerformed
        // TODO add your handling code here:
        analyzeAppLabelSet();
    }//GEN-LAST:event_analyze1ChoiceActionPerformed

    private void analyze2ChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyze2ChoiceActionPerformed
        // TODO add your handling code here:
        analyzeAppLabelSet();
    }//GEN-LAST:event_analyze2ChoiceActionPerformed

    private void analyze3ChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyze3ChoiceActionPerformed
        // TODO add your handling code here:
        analyzeAppLabelSet();
    }//GEN-LAST:event_analyze3ChoiceActionPerformed

    private void analyze4ChoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyze4ChoiceActionPerformed
        // TODO add your handling code here:
        analyzeAppLabelSet();
    }//GEN-LAST:event_analyze4ChoiceActionPerformed

    private void applicantSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_applicantSliderStateChanged
        // TODO add your handling code here:
        appIndex = applicantSlider.getValue();
        updateIndex();
    }//GEN-LAST:event_applicantSliderStateChanged
     
    
    private void changeLabelColor() {  
        if (displayColor.isSelected()) {
            Color introColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getIntroCompProg())) + 50 - 25, 0, 255), 0, 0);
            introScore.setBackground(introColor);
            
            Color advColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getAdvCompProg())) + 50 - 25, 0, 255), 0, 0);
            advScore.setBackground(advColor);
            
            Color networkingColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getNetworking())) + 50 - 25, 0, 255), 0, 0);
            networkingScore.setBackground(networkingColor);
            
            Color databaseSystemsColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getDatabaseSystems())) + 50 - 25, 0, 255), 0, 0);
            databaseSystemsScore.setBackground(databaseSystemsColor);
            
            Color algorithmsColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getAlgorithms())) + 50 - 25, 0, 255), 0, 0);
            algorithmsScore.setBackground(algorithmsColor);
            
            Color operatingColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getOperatingSystems())) + 50 - 25, 0, 255), 0, 0);
            operatingScore.setBackground(operatingColor);
            
            Color gpaColor = new Color((int) clamp(25 * Math.pow(1.022, (applicants.get(appIndex).getGpa())) + 50 - 25, 0, 255), 0, 0);
            gpaScore.setBackground(gpaColor);
        } else {
            introScore.setBackground(LABEL_COLOR);
            advScore.setBackground(LABEL_COLOR);
            networkingScore.setBackground(LABEL_COLOR);
            databaseSystemsScore.setBackground(LABEL_COLOR);
            algorithmsScore.setBackground(LABEL_COLOR);
            operatingScore.setBackground(LABEL_COLOR);
            gpaScore.setBackground(LABEL_COLOR);
        }
    }
    
    private double clamp (double value, double min, double max) {
        return value > max ? max : value < min ? min : value;
    }
    
    private void analyzeAppLabelSet() {  
        if (analyze1Choice.isSelected()) {  
            analysis.setText("Analysis 1: " + applicants.get(appIndex).analyzeApplicant1());  
        }
        if (analyze2Choice.isSelected()) {  
            analysis.setText("Analysis 2: " + applicants.get(appIndex).analyzeApplicant2());  
        }
        if (analyze3Choice.isSelected()) {  
            analysis.setText("Analysis 3: " + applicants.get(appIndex).analyzeApplicant3());  
        }
        if (analyze4Choice.isSelected()) {  
            analysis.setText("Analysis 4: " + applicants.get(appIndex).analyzeApplicant4());
        }
}
    
    private void updateIndex() {
        // implements specification 10
        if (appIndex < 0) {
            appIndex = 0;
        } else if (appIndex >= applicants.size()) {
            appIndex = applicants.size() - 1;
        }
        
        introScore.setText("Intro to Comp Prog: " + applicants.get(appIndex).getIntroCompProg());
        advScore.setText("Advanced Comp Prog: " + applicants.get(appIndex).getAdvCompProg());
        networkingScore.setText("Networking: " + applicants.get(appIndex).getNetworking());
        databaseSystemsScore.setText("Database Systems: " + applicants.get(appIndex).getDatabaseSystems());
        algorithmsScore.setText("Algorithms: " + applicants.get(appIndex).getAlgorithms());
        operatingScore.setText("Operating Systems: " + applicants.get(appIndex).getOperatingSystems());
        gpaScore.setText("GPA: " + applicants.get(appIndex).getGpa());
        analyzeAppLabelSet();

        appNumber.setText("" + appIndex);
        
        changeLabelColor();
        
        if (applicantSlider.getValue() != appIndex) {  
            applicantSlider.setValue(appIndex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel advScore;
    private javax.swing.JLabel algorithmsScore;
    private javax.swing.JLabel analysis;
    private javax.swing.JRadioButton analyze1Choice;
    private javax.swing.JRadioButton analyze2Choice;
    private javax.swing.JRadioButton analyze3Choice;
    private javax.swing.JRadioButton analyze4Choice;
    private javax.swing.ButtonGroup analyzeButtonGroup;
    private javax.swing.JTextField appNumber;
    private javax.swing.JSlider applicantSlider;
    private javax.swing.JLabel applicantSliderLabel;
    private javax.swing.JButton backwardApp;
    private javax.swing.JLabel databaseSystemsScore;
    private javax.swing.JCheckBox displayColor;
    private javax.swing.JButton forwardApp;
    private javax.swing.JLabel gpaScore;
    private javax.swing.JLabel introScore;
    private javax.swing.JLabel networkingScore;
    private javax.swing.JLabel operatingScore;
    // End of variables declaration//GEN-END:variables
}
